#include "MainWindow.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QWidget>
#include <QHeaderView>
#include <QSplitter>
#include <QLabel>
#include <QMessageBox>
#include <QCoreApplication>
#include <QDebug>
#include "AddPasswordDialog.h"
#include "../CryptoManager/CryptoManager.h"  // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å


MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    qDebug() << "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MainWindow –Ω–∞—á–∞—Ç–∞";

    if (!dbManager.openDatabase()) {
        QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
        qDebug() << "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö";
    }

    setupUI();
    qDebug() << "setupUI –∑–∞–≤–µ—Ä—à–µ–Ω";

    loadPasswords();
    qDebug() << "loadPasswords –∑–∞–≤–µ—Ä—à–µ–Ω";

    qDebug() << "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MainWindow –∑–∞–≤–µ—Ä—à–µ–Ω–∞";
}

void MainWindow::setupUI() {
    qDebug() << "–ù–∞—á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UI";

    auto *central = new QWidget(this);
    auto *mainLayout = new QHBoxLayout(central);

    // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categoryList = new QListWidget(this);
    populateCategories();

    // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
    auto *rightPanel = new QWidget(this);
    auto *rightLayout = new QVBoxLayout(rightPanel);

    // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (–ø–æ–∏—Å–∫ + –∫–Ω–æ–ø–∫–∞)
    auto *topBar = new QHBoxLayout();
    searchField = new QLineEdit(this);
    searchField->setPlaceholderText("–ü–æ–∏—Å–∫...");

    connect(searchField, &QLineEdit::textChanged, this, &MainWindow::onSearchTextChanged); // –¥–æ–±–∞–≤–ª–µ–Ω–æ

    addButton = new QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å", this);
    connect(addButton, &QPushButton::clicked, this, &MainWindow::onAddClicked);


    topBar->addWidget(searchField);
    topBar->addWidget(addButton);

    // –¢–∞–±–ª–∏—Ü–∞
    passwordTable = new QTableWidget(this);
    passwordTable->setColumnCount(4);
    QStringList headers = {"ID", "–°–µ—Ä–≤–∏—Å", "–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å"};
    passwordTable->setHorizontalHeaderLabels(headers);
    passwordTable->setColumnHidden(0, true); // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å id
    passwordTable->horizontalHeader()->setStretchLastSection(true);
    // passwordTable->setSelectionBehavior(QAbstractItemView::SelectRows);
    // passwordTable->setEditTriggers(QAbstractItemView::NoEditTriggers);

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    editButton = new QPushButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", this);
    connect(editButton, &QPushButton::clicked, this, &MainWindow::onEditClicked);

    deleteButton = new QPushButton("üóë –£–¥–∞–ª–∏—Ç—å", this);
    connect(deleteButton, &QPushButton::clicked, this, &MainWindow::onDeleteClicked);

    auto *buttonLayout = new QHBoxLayout();
    buttonLayout->addWidget(editButton);
    buttonLayout->addWidget(deleteButton);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë
    rightLayout->addLayout(topBar);
    rightLayout->addWidget(passwordTable);
    rightLayout->addLayout(buttonLayout);

    mainLayout->addWidget(categoryList);
    mainLayout->addWidget(rightPanel);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stretch: categoryList - –º–µ–Ω—å—à–µ, rightPanel (—Ç–∞–±–ª–∏—Ü–∞) - –±–æ–ª—å—à–µ
    mainLayout->setStretch(0, 1); // categoryList
    mainLayout->setStretch(1, 3); // rightPanel

    setCentralWidget(central); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    qDebug() << "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";

    setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä –ü–∞—Ä–æ–ª–µ–π");
    resize(800, 600);
}

void MainWindow::populateCategories() {
    categoryList->addItem("üìÅ –í—Å–µ");
    categoryList->addItem("üåê –í–µ–±-—Å–∞–π—Ç—ã");
    categoryList->addItem("üîê –ë–∞–Ω–∫–∏");
    categoryList->addItem("üíº –†–∞–±–æ—Ç–∞");
}

void MainWindow::onAddClicked() {
    AddPasswordDialog dialog(this);
    if (dialog.exec() == QDialog::Accepted) {
        QString service = dialog.getService();
        QString login = dialog.getlogin();
        QString password = dialog.getPassword();

        // –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        CryptoManager crypto("master"); // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        QByteArray encryptedPassword;
        try {
            encryptedPassword = crypto.encrypt(password);
        } catch (const std::exception& e) {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", QString("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: %1").arg(e.what()));
            return;
        }

        if (!dbManager.addPassword(service, login, encryptedPassword)) {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        qDebug() << "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏...";
        loadPasswords();
    }
}

void MainWindow::onEditClicked() {
    int row = passwordTable->currentRow();
    if (row >= 0) {
        QMessageBox::information(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ: " + QString::number(row));
    } else {
        QMessageBox::warning(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
    }
}

void MainWindow::onDeleteClicked() {
    int row = passwordTable->currentRow();
    if (row >= 0) {
        QMessageBox::StandardButton reply;
        reply = QMessageBox::question(this, "–£–¥–∞–ª–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å?",
                                      QMessageBox::Yes | QMessageBox::No);
        if (reply == QMessageBox::Yes) {
            // –ü–æ–ª—É—á–∞–µ–º id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ id –≤ –ø–µ—Ä–≤–æ–º —Å–∫—Ä—ã—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ)
            int id = passwordTable->item(row, 0)->text().toInt();

            // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (dbManager.deletePassword(id)) {
                // –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                passwordTable->removeRow(row);
                QMessageBox::information(this, "–£–¥–∞–ª–µ–Ω–æ", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.");
            } else {
                QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.");
            }
        }
    } else {
        QMessageBox::warning(this, "–£–¥–∞–ª–∏—Ç—å", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
    }
}

void MainWindow::loadPasswords() {
    qDebug() << "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...";
    passwordTable->setRowCount(0); // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

    QVector<PasswordEntry> entries = dbManager.getAllPasswords();
    qDebug() << "–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:" << entries.size();

    for (int i = 0; i < entries.size(); ++i) {
        const auto& entry = entries[i];
        qDebug() << "–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å: ID:" << entry.id << "Service:" << entry.service
                 << "Login:" << entry.login << "Password (Base64):" << entry.encryptedPassword;

        qDebug() << "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:" << entry.service << entry.login;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø—É—Å—Ç
        if (entry.encryptedPassword.isEmpty()) {
            qDebug() << "–û—à–∏–±–∫–∞: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏:" << entry.service;
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
        CryptoManager crypto("master"); // –≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å master-–ø–∞—Ä–æ–ª—å
        QString decryptedPassword;
        try {
            decryptedPassword = crypto.decrypt(entry.encryptedPassword); // –£–±—Ä–∞–Ω–æ toUtf8()
        } catch (const std::exception& e) {
            qDebug() << "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è:" << e.what();
            decryptedPassword = "[–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è]";
        } catch (...) {
            qDebug() << "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è.";
            decryptedPassword = "[–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è]";
        }

        passwordTable->insertRow(i);
        passwordTable->setItem(i, 0, new QTableWidgetItem(QString::number(entries[i].id))); // ID
        passwordTable->setItem(i, 1, new QTableWidgetItem(entry.service));
        passwordTable->setItem(i, 2, new QTableWidgetItem(entry.login));
        passwordTable->setItem(i, 3, new QTableWidgetItem(decryptedPassword));

        qDebug() << "–°—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " << i;
    }
    qDebug() << "–ü–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.";
    onSearchTextChanged(searchField->text()); // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
}

// –ù–æ–≤—ã–π —Å–ª–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
void MainWindow::onSearchTextChanged(const QString& text) {
    QString search = text.trimmed();
    for (int row = 0; row < passwordTable->rowCount(); ++row) {
        bool match = false;
        for (int col = 1; col <= 2; ++col) { // 1: —Å–µ—Ä–≤–∏—Å, 2: –ª–æ–≥–∏–Ω
            QTableWidgetItem* item = passwordTable->item(row, col);
            if (item && item->text().contains(search, Qt::CaseInsensitive)) {
                match = true;
                break;
            }
        }
        passwordTable->setRowHidden(row, !match && !search.isEmpty());
    }
}
